#pragma once

#define EMPTY_5x3   0,0,0,0,0
#define UNKNOWN_5x3  0,EMPTY_5x3

// ASCII to 5x3 matrix
const PROGMEM byte characters5xN[] ={
  // skip 32 first non printable ascii char
  UNKNOWN_5x3, UNKNOWN_5x3, UNKNOWN_5x3, UNKNOWN_5x3,
  UNKNOWN_5x3, UNKNOWN_5x3, UNKNOWN_5x3, UNKNOWN_5x3,
  UNKNOWN_5x3, UNKNOWN_5x3, UNKNOWN_5x3, UNKNOWN_5x3,
  UNKNOWN_5x3, UNKNOWN_5x3, UNKNOWN_5x3, UNKNOWN_5x3,
  UNKNOWN_5x3, UNKNOWN_5x3, UNKNOWN_5x3, UNKNOWN_5x3,
  UNKNOWN_5x3, UNKNOWN_5x3, UNKNOWN_5x3, UNKNOWN_5x3,
  UNKNOWN_5x3, UNKNOWN_5x3, UNKNOWN_5x3, UNKNOWN_5x3,
  UNKNOWN_5x3, UNKNOWN_5x3, UNKNOWN_5x3,
  // \x1F Â°
  2,
  0b11,
  0b11,
  0b00,
  0b00,
  0b00,
  // SPACE
  1,
  0b0,
  0b0,
  0b0,
  0b0,
  0b0,
  // !
  1,
  0b1,
  0b1,
  0b1,
  0b0,
  0b1,
  // "
  3,
  0b101,
  0b101,
  0b000,
  0b000,
  0b000,
  // #
  UNKNOWN_5x3,
  // $
  UNKNOWN_5x3,
  // %
  3,
  0b101,
  0b001,
  0b010,
  0b100,
  0b101,
  // &
  3,
  0b011,
  0b011,
  0b110,
  0b101,
  0b011,
  // '
  1,
  0b1,
  0b1,
  0b0,
  0b0,
  0b0,
  // (
  2,
  0b01,
  0b10,
  0b10,
  0b10,
  0b01,
  // )
  2,
  0b10,
  0b01,
  0b01,
  0b01,
  0b10,
  // *
  3,
  0b101,
  0b010,
  0b101,
  0b000,
  0b000,
  // +
  3,
  0b000,
  0b010,
  0b111,
  0b010,
  0b000,
  // ,
  2,
  0b00,
  0b00,
  0b00,
  0b01,
  0b10,
  // -
  2,
  0b00,
  0b00,
  0b11,
  0b00,
  0b00,
  // .
  1,
  0b0,
  0b0,
  0b0,
  0b0,
  0b1,
  // /
  3,
  0b001,
  0b001,
  0b010,
  0b100,
  0b100,
  // 0
  3,
  0b010,
  0b101,
  0b101,
  0b101,
  0b010,
  // 1
  3,
  0b010,
  0b110,
  0b010,
  0b010,
  0b111,
  // 2
  3,
  0b010,
  0b101,
  0b001,
  0b010,
  0b111,
  // 3
  3,
  0b110,
  0b001,
  0b110,
  0b001,
  0b110,
  // 4
  3,
  0b100,
  0b100,
  0b101,
  0b111,
  0b001,
  // 5
  3,
  0b111,
  0b100,
  0b110,
  0b001,
  0b110,
  // 6
  3,
  0b011,
  0b100,
  0b110,
  0b101,
  0b010,
  // 7
  3,
  0b111,
  0b001,
  0b010,
  0b100,
  0b100,
  // 8
  3,
  0b010,
  0b101,
  0b010,
  0b101,
  0b010,
  // 9
  3,
  0b010,
  0b101,
  0b011,
  0b001,
  0b110,
  // :
  1,
  0b0,
  0b1,
  0b0,
  0b1,
  0b0,
  // ;
  2,
  0b00,
  0b01,
  0b00,
  0b01,
  0b10,
  // <
  2,
  0b00,
  0b01,
  0b10,
  0b01,
  0b00,
  // =
  3,
  0b000,
  0b111,
  0b000,
  0b111,
  0b000,
  // >
  2,
  0b00,
  0b10,
  0b01,
  0b10,
  0b00,
  // ?
  3,
  0b110,
  0b001,
  0b010,
  0b000,
  0b010,
  // @
  5,
  0b01110,
  0b10001,
  0b10011,
  0b10011,
  0b01000,
  // A
  3,
  0b010,
  0b101,
  0b111,
  0b101,
  0b101,
  // B
  3,
  0b110,
  0b101,
  0b110,
  0b101,
  0b110,
  // C
  3,
  0b011,
  0b100,
  0b100,
  0b100,
  0b011,
  // D
  3,
  0b110,
  0b101,
  0b101,
  0b101,
  0b110,
  // E
  3,
  0b111,
  0b100,
  0b110,
  0b100,
  0b111,
  // F
  3,
  0b111,
  0b100,
  0b110,
  0b100,
  0b100,
  // G
  3,
  0b011,
  0b100,
  0b101,
  0b101,
  0b010,
  // H
  3,
  0b101,
  0b101,
  0b111,
  0b101,
  0b101,
  // I
  1,
  0b1,
  0b0,
  0b1,
  0b1,
  0b1,
  // J
  3,
  0b001,
  0b001,
  0b001,
  0b101,
  0b010,
  // K
  3,
  0b101,
  0b101,
  0b110,
  0b101,
  0b101,
  // L
  3,
  0b100,
  0b100,
  0b100,
  0b100,
  0b111,
  // M
  5,
  0b10001,
  0b11011,
  0b10101,
  0b10001,
  0b10001,
  // N
  4,
  0b1001,
  0b1101,
  0b1111,
  0b1011,
  0b1001,
  // O
  4,
  0b0110,
  0b1001,
  0b1001,
  0b1001,
  0b0110,
  // P
  3,
  0b110,
  0b101,
  0b110,
  0b100,
  0b100,
  // Q
  4,
  0b0110,
  0b1001,
  0b1001,
  0b1011,
  0b0111,
  // R
  3,
  0b110,
  0b101,
  0b110,
  0b101,
  0b101,
  // S
  3,
  0b011,
  0b100,
  0b010,
  0b001,
  0b110,
  // T
  3,
  0b111,
  0b010,
  0b010,
  0b010,
  0b010,
  // U
  4,
  0b1001,
  0b1001,
  0b1001,
  0b1001,
  0b0110,
  // V
  3,
  0b101,
  0b101,
  0b101,
  0b101,
  0b010,
  // W
  5,
  0b10001,
  0b10101,
  0b10101,
  0b10101,
  0b01010,
  // X
  3,
  0b101,
  0b101,
  0b010,
  0b101,
  0b101,
  // Y
  3,
  0b101,
  0b101,
  0b010,
  0b010,
  0b010,
  // Z
  3,
  0b111,
  0b001,
  0b010,
  0b100,
  0b111,
  // [
  2,
  0b11,
  0b10,
  0b10,
  0b10,
  0b11,
  // BACK / 
  3,
  0b100,
  0b100,
  0b010,
  0b001,
  0b001,
  // ]
  2,
  0b11,
  0b01,
  0b01,
  0b01,
  0b11,
  // ^
  3,
  0b010,
  0b101,
  0b000,
  0b000,
  0b000,
  // _
  3,
  0b000,
  0b000,
  0b000,
  0b000,
  0b111,
  // `
  2,
  0b10,
  0b01,
  0b00,
  0b00,
  0b00,
  // a-z
  // a
  3,
  0b000,
  0b000,
  0b011,
  0b101,
  0b011,
  // b
  3,
  0b100,
  0b100,
  0b110,
  0b101,
  0b110,
  // c
  3,
  0b000,
  0b000,
  0b011,
  0b100,
  0b011,
  // d
  3,
  0b001,
  0b001,
  0b011,
  0b101,
  0b011,
  // e
  3,
  0b000,
  0b010,
  0b111,
  0b100,
  0b011,
  // f
  2,
  0b01,
  0b10,
  0b11,
  0b10,
  0b10,
  // g
  3,
  0b000,
  0b011,
  0b111,
  0b001,
  0b110,
  // h
  3,
  0b100,
  0b100,
  0b110,
  0b101,
  0b101,
  // i
  1,
  0b0,
  0b1,
  0b0,
  0b1,
  0b1,
  // j
  2,
  0b01,
  0b00,
  0b01,
  0b01,
  0b10,
  // k
  3,
  0b100,
  0b100,
  0b101,
  0b110,
  0b101,
  // l
  2,
  0b10,
  0b10,
  0b10,
  0b10,
  0b01,
  // m
  5,
  0b00000,
  0b00000,
  0b11010,
  0b10101,
  0b10101,
  // n
  3,
  0b000,
  0b000,
  0b110,
  0b101,
  0b101,
  // o
  3,
  0b000,
  0b000,
  0b010,
  0b101,
  0b010,
  // p
  3,
  0b000,
  0b110,
  0b101,
  0b110,
  0b100,
  // q
  3,
  0b000,
  0b010,
  0b101,
  0b011,
  0b001,
  // r
  3,
  0b000,
  0b000,
  0b111,
  0b100,
  0b100,
  // s
  2,
  0b00,
  0b01,
  0b10,
  0b01,
  0b10,
  // t
  2,
  0b00,
  0b10,
  0b11,
  0b10,
  0b01,
  // u
  3,
  0b000,
  0b000,
  0b101,
  0b101,
  0b011,
  // v
  3,
  0b000,
  0b000,
  0b101,
  0b101,
  0b010,
  // w
  5,
  0b00000,
  0b00000,
  0b10001,
  0b10101,
  0b01010,
  // x
  3,
  0b000,
  0b000,
  0b101,
  0b010,
  0b101,
  // y
  3,
  0b000,
  0b101,
  0b101,
  0b010,
  0b100,
  // z
  3,
  0b000,
  0b000,
  0b111,
  0b010,
  0b111,
  // {
  3,
  0b011,
  0b010,
  0b110,
  0b010,
  0b011,
  // |
  1,
  0b1,
  0b1,
  0b1,
  0b1,
  0b1,
  // }
  3,
  0b110,
  0b010,
  0b011,
  0b010,
  0b110,
  // ~
  4,
  0b0000,
  0b0000,
  0b0101,
  0b1010,
  0b0000,
};
